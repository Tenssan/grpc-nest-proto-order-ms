// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.1
//   protoc               v5.26.1
// source: order.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "order";

export interface CreateOrderRequest {
  products: OrderItem[];
  userId: number;
  tableNumber: number;
}

export interface OrderItem {
  productId: number;
  quantity: number;
}

export interface CreateOrderResponse {
  status: number;
  errors: string[];
  id: number;
}

export interface GetUserRequest {
  userId: number;
}

export interface GetUserResponse {
  status: number;
  errors: string[];
  user: User | undefined;
}

export interface GetOrderRequest {
  orderId: number;
}

export interface GetOrderResponse {
  status: number;
  errors: string[];
  order: Order | undefined;
}

export interface GetAllOrdersRequest {
}

export interface GetAllOrdersResponse {
  status: number;
  errors: string[];
  orders: Order[];
}

export interface User {
  id: number;
  email: string;
  role: string;
}

export interface Order {
  id: number;
  userId: number;
  tableNumber: number;
  totalPrice: number;
  items: OrderItem[];
  user: User | undefined;
}

export const ORDER_PACKAGE_NAME = "order";

export interface OrderServiceClient {
  createOrder(request: CreateOrderRequest): Observable<CreateOrderResponse>;

  getUser(request: GetUserRequest): Observable<GetUserResponse>;

  getOrder(request: GetOrderRequest): Observable<GetOrderResponse>;

  getAllOrders(request: GetAllOrdersRequest): Observable<GetAllOrdersResponse>;
}

export interface OrderServiceController {
  createOrder(
    request: CreateOrderRequest,
  ): Promise<CreateOrderResponse> | Observable<CreateOrderResponse> | CreateOrderResponse;

  getUser(request: GetUserRequest): Promise<GetUserResponse> | Observable<GetUserResponse> | GetUserResponse;

  getOrder(request: GetOrderRequest): Promise<GetOrderResponse> | Observable<GetOrderResponse> | GetOrderResponse;

  getAllOrders(
    request: GetAllOrdersRequest,
  ): Promise<GetAllOrdersResponse> | Observable<GetAllOrdersResponse> | GetAllOrdersResponse;
}

export function OrderServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createOrder", "getUser", "getOrder", "getAllOrders"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("OrderService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("OrderService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const ORDER_SERVICE_NAME = "OrderService";
